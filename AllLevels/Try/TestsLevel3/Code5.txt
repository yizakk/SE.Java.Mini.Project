package AdditionalTests;

import java.awt.Color;
import org.junit.Test;

import elements.Camera;
import elements.DirectionalLight;
import elements.LightSource;
import elements.PointLight;
import elements.SpotLight;
import geometries.Plane;
import geometries.Quadrangle;
import geometries.Sphere;
import geometries.Triangle;
import primitives.Point3D;
import primitives.Vector;
import renderer.ImageWriter;
import renderer.Render;
import scene.Scene;


public class OtherCameraSettings {
	@Test
	public void test() throws Exception {

		
		String FileName = "DiffCameraTest1";
		Scene scene = new Scene();
		scene.setCamera(new Camera(new Point3D(0,0,0),
								   new Vector(0,1,0),
								   new Vector(0,0,1)));
     	scene.setScreenDistance(250);

//	**************************** Background  **********************************   	//
     	
     	Quadrangle qFloor = new Quadrangle(new Point3D(-600,-600, 200), // left-down corner
     								   new Point3D( 600, -600, 200),//right-down corner 
     					 			   new Point3D( 200, 100, 500), // right-up corner
     					 			   new Point3D( -200, 100, 500));// left-up corner
     	qFloor.setEmmission(new Color(100,20,20));
     	qFloor.setShininess(10);
     	qFloor.setKr(0);
     	qFloor.setKt(0);
     	
     	Quadrangle qLeftWall=new Quadrangle(new Point3D( -600, 600, 200), // left-up corner
     									new Point3D( -600, -600, 200),//right-down corner 
     									new Point3D( -200,  90, 500), // right-up corner
     									new Point3D(  -200,  200, 500));// left-up corner
     	qLeftWall.setEmmission(new Color(60,20,60));
     	qLeftWall.setShininess(10);
     	qLeftWall.setKr(1);
     	qLeftWall.setKt(0.2);
     	
     	Quadrangle qRightWall=new Quadrangle(new Point3D( 600, 600, 200), // left-up corner
     										 new Point3D( 600,  -600, 200),// left-up corner
     										 new Point3D(  200, -200, 500),//right-down corner 
     										 new Point3D(  200,  200, 500)); // right-up corner
     	qRightWall.setEmmission(new Color(60,20,60));
     	qRightWall.setShininess(10);
     	qRightWall.setKr(1);
     	qRightWall.setKt(0.2);
     	
     	
     	Quadrangle qOppWall=new Quadrangle(new Point3D( -200, 200, 500), // left-up corner
     									   new Point3D( -200, -200, 500),//right-down corner 
     									   new Point3D( 200,  -200, 500), // right-up corner
     									   new Point3D(  200,  200, 500));// left-up corner
     	qOppWall.setEmmission(new Color(255,255,255));
     	qOppWall.setShininess(30);
     	qOppWall.setKr(0.2);
     	qOppWall.setKt(0.2);

     	Quadrangle qRoof=new Quadrangle(new Point3D( -600, 600, 200), // left-up corner
     									new Point3D(  600,  600, 200),// left-up corner
     									new Point3D(  200, -200, 500),//right-down corner 
     									new Point3D(  200,  200, 500)); // right-up corner
     	qRoof.setEmmission(new Color(60,20,60));
     	qRoof.setShininess(10);
     	qRoof.setKr(1);
     	qRoof.setKt(0.2);

     	
//     	scene.addGeometry(qRoof);
     	scene.addGeometry(qOppWall);
     	scene.addGeometry(qFloor);
     	scene.addGeometry(qLeftWall);
     	scene.addGeometry(qRightWall);
//**************************** Planes  ********************************** //
     	
     	Plane p1 = new Plane(Color.WHITE, new Vector (0.2,0.2,-1) , new Point3D(0,0,450));
//     	scene.addGeometry(p1);
     	
//**************************** Spheres  ********************************** //
     	
     	
     	// mirror sphere 2 - left up
     	Sphere s4 = new Sphere(50, new Point3D(150,-350,-600));
     	s4.setEmmission(new Color (100,120,180));
     	s4.setShininess(20);
     	s4.setKr(1);
     	s4.setKt(0.1);
     	
     	// mirror sphere 2 - left up
     	Sphere rightRightBack = new Sphere(new Color (100,70,180), 30, new Point3D(120,-100,350));
     	rightRightBack.setShininess(10);
     	rightRightBack.setKr(1);
     	rightRightBack.setKt(0);
     
     	// mirror sphere - left down
     	Sphere rightRed = new Sphere(new Color (100,70,180), 30, new Point3D(80,0,450));
     	rightRed.setShininess(20);
     	rightRed.setKr(1);
     	rightRed.setKt(0.1);

     	// main blue circle
		Sphere blueBig = new Sphere(new Color(0, 0, 150), 70, new Point3D(0, 0, 450));
		blueBig.setShininess(20);
        blueBig.setKt(0);
        blueBig.setKr(0);
		
        // Inner little sphere 
		Sphere purpleLittle = new Sphere(new Color(30, 60, 160), 30, new Point3D(-110, 0, 450));
		purpleLittle.setShininess(20);
		purpleLittle.setKt(0.3);

		
		scene.addGeometry(purpleLittle);
		scene.addGeometry(rightRed);
		scene.addGeometry(blueBig);
     	scene.addGeometry(rightRightBack);
//    	scene.addGeometry(s4);
	
//*********************************** Lights  ********************************** //  
		
// Adding the light at the left down side of the picture
		LightSource spotLeftLeft = new SpotLight(new Color(255, 100, 100), 
												new Point3D(-300, 600, 200), 
												new Vector(1, -2, 1), 0.1, 
												0.00001, 0.000005);
		
//  left down side of the picture
		LightSource spotRightDownCorner = new SpotLight(new Color(255, 100, 100), 
													   new Point3D(300, -300, 200), 
													   new Vector(-1 , 3 , 1), 0.1, 
													   0.00001, 0.000005);
		
//  right down side of the picture
		LightSource spotRightDown = new SpotLight(new Color(50, 80, 100), 
												  new Point3D(1500, -1500, -700), 
												  new Vector(-1, 1.5, 1.5), 0.1, 
												  0.00001, 0.000005);

	//  right down side of the picture
		LightSource spotMidCenter = new SpotLight(new Color(50, 80, 100), 
												  new Point3D(-100, 500, -700), 
												  new Vector(1, -1.5, 1.5), 0.1, 
												  0.00001, 0.000005);
// down Point Light	
		LightSource pointCenterUp = new PointLight(new Color(155, 100, 100),
													 new Point3D(00, 300 , 250), 
													 0, 0.00001, 0.000005);

// down Point Light	
		LightSource pointLeftUP = new PointLight(new Color(255, 0, 00),
													 new Point3D(-1500, 1500,-1500), 
													 0, 0.00001, 0.000005);
		
		LightSource dir = new DirectionalLight(new Color(255,0,120), new Vector(1,1,1));
		
		
//		scene.addLight(pointCenterUp);
		scene.addLight(spotLeftLeft);
//		scene.addLight(spotRightDownCorner);
//		scene.addLight(dir);
//		scene.addLight(spotRightDown);
//		scene.addLight(spotMidCenter);
//		scene.addLight(pointLeftUP);
		
		
//************************************* Triangles  ********************************** //   		
  	
		// mirror triangle
		Triangle mirror1 = new Triangle(new Point3D(  1500, -1500, 300),
				 						 new Point3D( -1500,  1500, 300),
				 						 new Point3D(  200,  200, 375));
		mirror1.setEmmission(new Color(20, 20, 20));
		mirror1.setKr(1);
		mirror1.setKt(0.5);

		// mirror triangle 2
		Triangle mirror2 = new Triangle(new Point3D(  150, 150, -100),
										  new Point3D( 150,  -150, -100),
										  new Point3D(  200,  200, -375));
		mirror2.setEmmission(new Color(20, 20, 20));
		mirror2.setKr(1);
		mirror2.setKt(0.5);

		// mirror triangle 3
		Triangle mirror3 = new Triangle(new Point3D( 1500, -1500, -100),//right-down
										  new Point3D( -1500, 1500, -100),//left-up
										  new Point3D( -1500, -1500, 100));//left-down
		mirror3.setEmmission(new Color(60, 60, 60));
		mirror3.setKr(1);
		mirror3.setKt(0);
		
		// base triangle
		Triangle upPointLightBlockTriangle = new Triangle(new Point3D(  00,  200, 500),
										  			      new Point3D( -100,200, 300),
										  			      new Point3D( 100,200, 400));
		upPointLightBlockTriangle.setEmmission(new Color(60, 60, 60));
		//upPointLightBlockTriangle.setKr(0);
		upPointLightBlockTriangle.setKt(0.5);

//		scene.addGeometry(upPointLightBlockTriangle);
//		scene.addGeometry(mirror2);
//		scene.addGeometry(mirror3);
//		scene.addGeometry(mirror1);
		
		
//*********************************** Not in use  ********************************** //       	

     	
//**************************** Rendering  ********************************** //     	
 
     	ImageWriter imageWriter = new ImageWriter(FileName, 500, 500, 500, 500);
		Render render = new Render(imageWriter,scene);
		
		render.renderImage();
		render.writeToImage(); 

		String path = render.getImageWriter().getRenderingDirectory();
		Runtime.getRuntime().exec("explorer.exe /open, " + path+"\\" + FileName +".jpg");
	}
}